# Кортежи четко упорядоченная последовательность элементов. кортежи - не изменяемы/
#кортежи помогают сохранить данные от случайного или специального изменения

# x = (9, 8, 7, 6)
# print(type(x)) #<class 'tuple'>

# # функция tuple для преобразования в кортеж

# x = tuple('stroka')
# print(x) # ('s', 't', 'r', 'o', 'k', 'a')


# x = (9, 8, 7)
# print(x[0]) # обращаемся к элементу с идексом 0
# print(x[0] + 5) # можем проводить операции с элементами, но сам кортеж не изменится

# print(x)

'''
кортеж можно распаковать

# x = (9, 8, 7, 6, 5, 4, 3, 2)
# # z, c, b = x
# r = 5
# u = 7
# r, u =(u, r) # swap переменных, обмен данных между переменными

# print(x)
# print(r) #7
# print(u)#5
# print(x[1:5])  # (8, 7, 6, 5) срез крптежа

'''

#работа с кортежем:

# x = (9, 8, 7, 6, 5, 4, 3, 2)
# y = [] # данные берутся из кортежа, изменяются, сохраняются в список
# for i in range(len(x)):
#     y.append(x[i] + 3)
# print(x)#кортеж остается без изменений
# print(y)# [12, 11, 10, 9, 8, 7, 6, 5]


'''
если кортеж надо изменить - сначала конвертируем в список, потом вносим изменения и измененный список снова конвертируем в кортеж:

x = (9, 8, 7, 6, 5, 4, 3, 2)
t = list(x)
t[0] = 10
x = tuple(t)
print(x)
'''
# функции кортежей:
#.count() - сколько одинаковых элементов в кортеже
# .index() - показывает индекс элемента. если элемент не один раз встречается показывает индекс толька первого


# x = (9, 8, 7, 6, 5, 4, 9, 3, 2)
# print(x.count(9))
# print(x.index(9)) 


'''
к кортежу можно добавить еще один кортеж

h = (1, 2, 3)
h+=(4, 5)
print(h)
'''

h = (1, 2, 3)
g = h # h копируется в g, потом h изменяется, а g нет, т.к. информация была скопирована до изменения. 
#в списке, если меняется один список, то меняется и другой в аналогичной ситуации
h+=(4, 5)
print(g) # (1, 2, 3)
print(h) # (1, 2, 3, 4, 5)