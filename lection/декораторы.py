# декоратор - функция которая позволяет обернуть другую функцию в свой код, тем самым модифицируя её поведение


#имя функции можно передать как ссылку в другую переменную
# h=make
# h()


'''
 декоратор позволяет модифицировать код функции так как нам нужно не вмешиваясь в ее код
'''



# def decor(f): # функция декоратор
#     def wrapper(): # wrapper стандартное имя для функции обертки
#         print('Код декоратора') # код который как-то модифицирует поведение функции
#         f() # в параменте f ссылка на функцию make
#         print('Второй код декоратора')  # снова работает код декоратора обрабатывая данные из функции
#     return wrapper




# @decor # make = decor(make)
# def make():
#     enter = input('Enter something...')
#     print(enter)

# print('здесь')
# make()

'''
пример использования декоратора
как работает декоратор:
запись @decor означает, что здесь запускается функция декоратор, в нее как аргумент передается имя функции make, сохраняется в параметр.
сразу, функция декоратор возвращает имя вложенной функции обертки wrapper. имя make становится = имени wrapper 
и далее запуская make запускаем wrapper, и отрабатывает ее код в котором уже прописано имя make (параметр f()), соответственно запускаем код.
'''
def decor(f):
    def wrapper():
        try:
            h = f() # переменная в которую созраняем возвращаемое значение из функции return enter
        except Exception:
            print('Повторите ввод: ')
            h = f() # снова запускаем функцию 
        return h
    return wrapper

        
@decor
def make():
    enter = float(input('Введите число: '))
    return enter

@decor
def make2():
    enter = float(input('Введите число опять: '))
    return enter

make2()
make()